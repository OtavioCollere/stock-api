// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  customer
  seller
}

model User {
  id            String   @id @default(uuid())
  name          String
  cpf           String   @unique
  email         String   @unique
  password      String
  role          Role
  phone         String
  birthDate     DateTime
  emailVerified Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  // Relações com Category
  categoriesCreated Category[] @relation("CategoriesCreated")
  categoriesUpdated Category[] @relation("CategoriesUpdated")

  // Relações com Product
  productsCreated Product[]       @relation("ProductsCreated")
  productsUpdated Product[]       @relation("ProductsUpdated")
  StockMovement   StockMovement[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy String
  updatedBy String?

  createdByUser User  @relation("CategoriesCreated", fields: [createdBy], references: [id])
  updatedByUser User? @relation("CategoriesUpdated", fields: [updatedBy], references: [id])

  products Product[]
}

enum Status {
  active
  archived
}

model Product {
  id String @id @default(uuid())

  name         String
  slug         String
  productCode  String?
  description  String?
  quantity     Int
  currentPrice Float
  status       Status
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  createdByUserId String
  updatedByUserId String?

  createdByUser User            @relation("ProductsCreated", fields: [createdByUserId], references: [id])
  updatedByUser User?           @relation("ProductsUpdated", fields: [updatedByUserId], references: [id])
  StockMovement StockMovement[]
}

enum StockMovementType {
  IN
  OUT
}

model StockMovement {
  id String @id @default(uuid())

  sellerId String
  seller   User   @relation(fields: [sellerId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [id])

  type StockMovementType

  quantity  Int
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
